// Configuraci√≥n unificada de emails
import { sendWelcomeEmail as sendWelcomeEmailNodemailer, sendAdminNotification as sendAdminNotificationNodemailer } from './email-service'
import { sendWelcomeEmail as sendWelcomeEmailResend, sendAdminNotification as sendAdminNotificationResend } from './email-service-resend'

// Detectar qu√© servicio de email usar basado en las variables de entorno
const getEmailService = () => {
  // Prioridad 1: Resend (m√°s moderno y f√°cil)
  if (process.env.RESEND_API_KEY && process.env.RESEND_API_KEY !== 're_your_api_key_here') {
    console.log('üìß Usando servicio de email: Resend')
    return 'resend'
  }
  
  // Prioridad 2: Gmail con Nodemailer (tradicional)
  if (process.env.EMAIL_USER && process.env.EMAIL_PASS) {
    console.log('üìß Usando servicio de email: Gmail (Nodemailer)')
    return 'gmail'
  }
  
  // Sin configuraci√≥n - modo desarrollo
  console.log('üìß Modo desarrollo: emails simulados')
  return 'development'
}

// Funci√≥n unificada para enviar email de bienvenida
export const sendWelcomeEmail = async (
  companyEmail: string,
  companyName: string,
  tempPassword: string
) => {
  const service = getEmailService()
  
  switch (service) {
    case 'resend':
      // En modo desarrollo de Resend, solo podemos enviar a emails verificados
      // As√≠ que notificamos al admin en lugar de a la empresa
      const adminEmail = process.env.ADMIN_EMAIL || 'guido.llaurado@gmail.com'
      console.log(`üìß Resend modo desarrollo: enviando credenciales al admin (${adminEmail}) en lugar de a la empresa (${companyEmail})`)
      
      return sendWelcomeEmailResend(adminEmail, companyName, tempPassword, companyEmail)
    case 'gmail':
      return sendWelcomeEmailNodemailer(companyEmail, companyName, tempPassword)
    case 'development':
    default:
      // En modo desarrollo, simular env√≠o exitoso y mostrar en consola
      console.log('üìß EMAIL SIMULADO - MODO DESARROLLO')
      console.log('=' .repeat(50))
      console.log('üì® Para:', companyEmail)
      console.log('üè¢ Empresa:', companyName)
      console.log('üîë Contrase√±a temporal:', tempPassword)
      console.log('üîó URL:', process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000')
      console.log('=' .repeat(50))
      return { 
        success: true, 
        messageId: 'dev-simulation-' + Date.now(),
        service: 'development' 
      }
  }
}

// Funci√≥n unificada para enviar notificaci√≥n al admin
export const sendAdminNotification = async (
  companyName: string,
  companyEmail: string,
  subscriptionPlan: string
) => {
  const service = getEmailService()
  
  switch (service) {
    case 'resend':
      return sendAdminNotificationResend(companyName, companyEmail, subscriptionPlan)
    case 'gmail':
      return sendAdminNotificationNodemailer(companyName, companyEmail, subscriptionPlan)
    case 'development':
    default:
      // En modo desarrollo, simular notificaci√≥n al admin
      console.log('üìß NOTIFICACI√ìN AL ADMIN - SIMULADA')
      console.log('üì® Para admin:', process.env.ADMIN_EMAIL || 'admin@acopiogh.com')
      console.log('üè¢ Nueva empresa:', companyName)
      console.log('üìß Email empresa:', companyEmail)
      console.log('üìã Plan:', subscriptionPlan)
      console.log('üìÖ Fecha:', new Date().toLocaleString('es-AR'))
      return { 
        success: true, 
        messageId: 'admin-dev-simulation-' + Date.now(),
        service: 'development' 
      }
  }
}

// Funci√≥n para verificar la configuraci√≥n de email
export const checkEmailConfiguration = () => {
  const service = getEmailService()
  
  const config = {
    service,
    configured: service !== 'development',
    details: {}
  }
  
  switch (service) {
    case 'resend':
      config.details = {
        provider: 'Resend',
        apiKey: process.env.RESEND_API_KEY ? '‚úÖ Configurado' : '‚ùå No configurado',
        fromEmail: process.env.EMAIL_FROM || 'noreply@acopiogh.com',
        adminEmail: process.env.ADMIN_EMAIL || 'No configurado'
      }
      break
    case 'gmail':
      config.details = {
        provider: 'Gmail (Nodemailer)',
        user: process.env.EMAIL_USER || 'No configurado',
        password: process.env.EMAIL_PASS ? '‚úÖ Configurado' : '‚ùå No configurado',
        fromEmail: process.env.EMAIL_FROM || process.env.EMAIL_USER || 'No configurado',
        adminEmail: process.env.ADMIN_EMAIL || 'No configurado'
      }
      break
    case 'development':
      config.details = {
        provider: 'Desarrollo (Simulado)',
        note: 'Los emails se mostrar√°n en la consola para testing',
        adminEmail: process.env.ADMIN_EMAIL || 'admin@acopiogh.com'
      }
      break
  }
  
  return config
}

// Exportar tambi√©n las funciones de generaci√≥n de contrase√±a
export { generatePassword } from './email-service'
